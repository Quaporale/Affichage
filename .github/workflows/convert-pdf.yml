name: Convert PDF to PNG and Crop

on:
  repository_dispatch:
    types: [run-from-script]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Set dynamic matrix from client payload
        id: set-matrix
        run: |
          echo "üì¶ Payload re√ßu :"
          echo '${{ toJson(github.event.client_payload.exports) }}'
          
          exports_json=$(echo '${{ toJson(github.event.client_payload.exports) }}' | jq -c '.')
          echo "‚úÖ Matrix: $exports_json"
          echo "matrix=$exports_json" >> "$GITHUB_OUTPUT"

  convert:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        export_dir: ${{fromJson(needs.build.outputs.matrix)}}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Poppler & ImageMagick
        run: |
          sudo apt-get update
          sudo apt-get install -y poppler-utils imagemagick jq

      - name: Set working directory
        id: set-dir
        run: |
          echo "DIR=${{ matrix.export_dir }}" >> "$GITHUB_ENV"
          echo "Traitement du dossier : ${{ matrix.export_dir }}"

      - name: Convert PDF to PNG
        run: |
          echo "üìÑ PDF source : $DIR/Export.pdf"
          rm -f "$DIR"/*.png
          mkdir -p "$DIR"
          pdftoppm -png "$DIR"/Export.pdf "$DIR"/Export

      - name: Trim borders from PNGs
        run: |
          for img in "$DIR"/*.png; do
            echo "üîß Traitement $img"
            convert "$img" -gravity South -splice 0x1 "$img"
            width=$(identify -format "%w" "$img")
            height=$(identify -format "%h" "$img")
            y=$((height - 1))
            convert "$img" -fill black -draw "rectangle 0,$y $((width - 1)),$y" "$img"
            convert "$img" -trim +repage "$img"
            mogrify -gravity South -chop 0x1 "$img"
            convert "$img" -gravity North -splice 0x1 "$img"
            convert "$img" -fill black -draw "rectangle 0,0 $((width - 1)),0" "$img"
            convert "$img" -trim +repage "$img"
            mogrify -gravity North -chop 0x1 "$img"
            echo "‚úÖ Termin√© : $img"
          done

      - name: Combine all PNGs into one image
        run: |
          convert "$DIR"/*.png -append "$DIR"/Export-Full.png

      - name: Trim white borders from final image
        run: |
          convert "$DIR"/Export-Full.png -trim +repage "$DIR"/Export-Full.png

      - name: Commit PNGs to repo
        run: |
          git config user.name github-actions
          git config user.email actions@github.com
          git add "$DIR"/*.png
          git commit -m "Auto-convert and crop PDF pages from $DIR" || echo "‚ÑπÔ∏è Aucun changement PNG √† commit"
          git push

      - name: Ensure index.html exists and commit if needed
        run: |
          PARENT_DIR=$(dirname "$DIR")
          GRANDPARENT_DIR=$(dirname "$PARENT_DIR")

          echo "üîç V√©rification de $PARENT_DIR/index.html ..."
          if [ ! -f "$PARENT_DIR/index.html" ]; then
            echo "üìÑ index.html manquant. Copie depuis $GRANDPARENT_DIR/index-exemple.html ..."
            cp "$GRANDPARENT_DIR/index-exemple.html" "$PARENT_DIR/index.html"

            git config user.name github-actions
            git config user.email actions@github.com
            git add "$PARENT_DIR/index.html"
            git commit -m "Ajout automatique de index.html dans $PARENT_DIR" || echo "‚ÑπÔ∏è Aucun changement √† commit"
            git push
          else
            echo "‚úÖ index.html d√©j√† pr√©sent dans $PARENT_DIR."
          fi
