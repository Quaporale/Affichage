name: Convert PDF to PNG and Crop

on:
  repository_dispatch:
    types: [run-from-script]
  workflow_dispatch:

jobs:
  convert:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install Poppler & ImageMagick & jq
        run: |
          sudo apt-get update
          sudo apt-get install -y poppler-utils imagemagick jq

      - name: Charger les exports depuis payload
        id: load-exports
        run: |
          echo '${{ toJson(github.event.client_payload.exports) }}' > exports.json
          cat exports.json

      - name: Convert PDF to PNG
        run: |
          for DIR in $(jq -r '.[]' exports.json); do
            echo "üìÑ PDF source : $DIR/Export.pdf"
            rm -f "$DIR"/*.png || true
            mkdir -p "$DIR"
            pdftoppm -png "$DIR/Export.pdf" "$DIR/Export"
          done

      - name: Trim borders from PNGs
        run: |
          for DIR in $(jq -r '.[]' exports.json); do
            for img in "$DIR"/*.png; do
              echo "üîß Trim $img"
              convert "$img" -gravity South -splice 0x1 "$img"
              width=$(identify -format "%w" "$img")
              height=$(identify -format "%h" "$img")
              y=$((height - 1))
              convert "$img" -fill black -draw "rectangle 0,$y $((width - 1)),$y" "$img"
              convert "$img" -trim +repage "$img"
              mogrify -gravity South -chop 0x1 "$img"
              convert "$img" -gravity North -splice 0x1 "$img"
              convert "$img" -fill black -draw "rectangle 0,0 $((width - 1)),0" "$img"
              convert "$img" -trim +repage "$img"
              mogrify -gravity North -chop 0x1 "$img"
              echo "‚úÖ Termin√© : $img"
            done
          done

      - name: Combine PNGs into one image
        run: |
          for DIR in $(jq -r '.[]' exports.json); do
            echo "üñºÔ∏è Fusion des PNGs de $DIR"
            convert "$DIR"/*.png -append "$DIR/Export-Full.png"
          done

      - name: Trim final full image
        run: |
          for DIR in $(jq -r '.[]' exports.json); do
            echo "‚úÇÔ∏è Dernier trim pour $DIR/Export-Full.png"
            convert "$DIR"/Export-Full.png -trim +repage "$DIR"/Export-Full.png
          done

      - name: Commit PNGs to repo
        run: |
          git config user.name github-actions
          git config user.email actions@github.com
          for DIR in $(jq -r '.[]' exports.json); do
            echo "üì§ Commit des PNGs dans $DIR"
            git add "$DIR"/*.png
            git commit -m "Auto-convert and crop PDF pages from $DIR" || echo "‚ÑπÔ∏è Aucun changement √† commit"
            git pull --rebase || echo "‚ÑπÔ∏è Aucun changement distant"
            git push || echo "‚ö†Ô∏è Push √©chou√© (conflit possible)"
          done

      - name: Ensure index.html exists and commit if needed
        run: |
          git config user.name github-actions
          git config user.email actions@github.com
          for DIR in $(jq -r '.[]' exports.json); do
            PARENT_DIR=$(dirname "$DIR")
            GRANDPARENT_DIR=$(dirname "$PARENT_DIR")

            echo "üîç V√©rification de $PARENT_DIR/index.html"
            if [ ! -f "$PARENT_DIR/index.html" ]; then
              echo "üìÑ Ajout de index.html depuis $GRANDPARENT_DIR/index-exemple.html"
              cp "$GRANDPARENT_DIR/index-exemple.html" "$PARENT_DIR/index.html"
              git add "$PARENT_DIR/index.html"
              git commit -m "Ajout automatique de index.html dans $PARENT_DIR" || echo "‚ÑπÔ∏è Aucun changement √† commit"
              git pull --rebase || echo "‚ÑπÔ∏è Aucun changement distant"
              git push || echo "‚ö†Ô∏è Push √©chou√© (conflit possible)"
            else
              echo "‚úÖ index.html d√©j√† pr√©sent."
            fi
          done
